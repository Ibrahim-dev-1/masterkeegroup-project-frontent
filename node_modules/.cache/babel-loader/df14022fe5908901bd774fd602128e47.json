{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\src\\\\contexts\\\\employeContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nconst EmployeContext = React.createContext();\nconst EmployeDispatchContext = React.createContext(); //==================== LES FONCTIONS =====================//\n// ============= ADD DIVISION ==============================//\n// =============================================//\n//                 REDUCER\n//==============================================//\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_EMPLOYE\":\n      return _objectSpread({}, state, {\n        employes: [...state.employes, action.payload]\n      });\n\n    case \"GET_EMPLOYE\":\n      return _objectSpread({}, state, {\n        employes: action.payload\n      });\n\n    default:\n      console.log(\"le type entrez est inconnue . Veuillez entrez un type d'action valide : ERROR : \" + action.type);\n      return state;\n  }\n}; // =============================================//\n//                 PROVIDER\n//==============================================//\n\n\nconst EmployeProvider = ({\n  children\n}) => {\n  const _React$useReducer = React.useReducer(rootReducer, {}),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  return React.createElement(EmployeContext.Provider, {\n    value: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(EmployeDispatchContext.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, children));\n}; // =============================================//\n//                 le consummer du state\n//==============================================//\n\n\nconst useEmployeContext = () => {\n  const context = React.useContext(EmployeContext);\n\n  if (context === undefined) {\n    throw new Error(\" le State doit s'uitliser dans le provider \");\n  }\n\n  return context;\n}; // =============================================//\n//                 le consummer du reducer\n//==============================================//\n\n\nconst useEmployeDispatchContext = () => {\n  const context = React.useContext(EmployeDispatchContext);\n\n  if (context === undefined) {\n    console.log(\"[*] Dispatch state: \" + context);\n    throw new Error(\" la fonction dispatch doit s'utiliser dans le provider \");\n  }\n\n  return context;\n}; //  ============================================================//\n\n\nconst getEmploye = async dispatch => {\n  console.log(\"Recupération de tous les employés dans notre base de donné backend \"); // ======= Fetch data from database\n\n  const requestBody = {\n    query: \" query { employes{\\n            id\\n            nom\\n            prenom\\n            date_naissance\\n            sexe\\n            situation_matrimoniale\\n            address{ tel, ville,pays }\\n            division{ }\\n            admin\\n            email\\n            compteurConge { type_conge, acquis , restant }\\n            password\\n          } }\"\n  };\n  const resultat = await fetch('http://localhost:8000/graphql', {\n    method: \"POST\",\n    body: JSON.stringify(requestBody),\n    headers: {\n      'content-type': 'application/json'\n    }\n  });\n\n  if (resultat.status !== 200 && resultat.status !== 201) {\n    const _ref = await resultat.json(),\n          errors = _ref.errors;\n\n    const tabErrors = errors.map(err => {\n      return err.message;\n    });\n    console.log(tabErrors);\n    throw new Error(tabErrors);\n  }\n\n  const _ref2 = await resultat.json(),\n        data = _ref2.data;\n\n  return dispatch({\n    type: \"GET_EMPLOYE\"\n  }, data.employes);\n};\n\nexport { useEmployeContext, useEmployeDispatchContext, EmployeProvider, getEmploye };","map":{"version":3,"sources":["C:\\Users\\Kratos\\Desktop\\PROJET BTS\\kratos_react\\src\\contexts\\employeContext.js"],"names":["React","EmployeContext","createContext","EmployeDispatchContext","rootReducer","state","action","type","employes","payload","console","log","EmployeProvider","children","useReducer","dispatch","useEmployeContext","context","useContext","undefined","Error","useEmployeDispatchContext","getEmploye","requestBody","query","resultat","fetch","method","body","JSON","stringify","headers","status","json","errors","tabErrors","map","err","message","data"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst EmployeContext = React.createContext();\r\nconst EmployeDispatchContext = React.createContext();\r\n\r\n\r\n\r\n//==================== LES FONCTIONS =====================//\r\n\r\n// ============= ADD DIVISION ==============================//\r\n\r\n\r\n\r\n\r\n\r\n// =============================================//\r\n//                 REDUCER\r\n//==============================================//\r\nconst rootReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_EMPLOYE\":\r\n           return { ...state , employes: [...state.employes, action.payload ]};\r\n       \r\n        case \"GET_EMPLOYE\":\r\n            return {...state, employes: action.payload }\r\n\r\n        default:\r\n            console.log(\"le type entrez est inconnue . Veuillez entrez un type d'action valide : ERROR : \" + action.type);\r\n            return state;\r\n    }\r\n}\r\n\r\n// =============================================//\r\n//                 PROVIDER\r\n//==============================================//\r\nconst EmployeProvider = ({children}) => {\r\n\r\n    const [ state, dispatch ] = React.useReducer(rootReducer, {});\r\n    return <EmployeContext.Provider value={ state } >\r\n            <EmployeDispatchContext.Provider value={dispatch}>\r\n                { children }\r\n            </EmployeDispatchContext.Provider>\r\n    </EmployeContext.Provider>\r\n}\r\n\r\n// =============================================//\r\n//                 le consummer du state\r\n//==============================================//\r\nconst useEmployeContext = () => {\r\n   const context = React.useContext(EmployeContext);\r\n   if(context === undefined)\r\n   {\r\n      throw new Error( \" le State doit s'uitliser dans le provider \")\r\n   }\r\n   return  context;\r\n}\r\n\r\n// =============================================//\r\n//                 le consummer du reducer\r\n//==============================================//\r\nconst useEmployeDispatchContext = () => {\r\n    const context = React.useContext(EmployeDispatchContext);\r\n    if(context === undefined)\r\n    {\r\n        console.log(\"[*] Dispatch state: \" + context );\r\n            throw new Error(\" la fonction dispatch doit s'utiliser dans le provider \")\r\n    }\r\n \r\n    return context;\r\n }\r\n\r\n\r\n//  ============================================================//\r\nconst getEmploye = async (dispatch) => {\r\n     console.log(\"Recupération de tous les employés dans notre base de donné backend \");\r\n\r\n     // ======= Fetch data from database\r\n     const requestBody = {\r\n         query: ` query { employes{\r\n            id\r\n            nom\r\n            prenom\r\n            date_naissance\r\n            sexe\r\n            situation_matrimoniale\r\n            address{ tel, ville,pays }\r\n            division{ }\r\n            admin\r\n            email\r\n            compteurConge { type_conge, acquis , restant }\r\n            password\r\n          } }`\r\n     }\r\n     const resultat = await fetch('http://localhost:8000/graphql', {\r\n         method: \"POST\",\r\n         body: JSON.stringify(requestBody),\r\n         headers: {\r\n             'content-type': 'application/json'\r\n         }\r\n     })\r\n     \r\n     if(resultat.status !== 200 && resultat.status !== 201)\r\n     {\r\n         const { errors } = await resultat.json();\r\n         \r\n         const tabErrors = errors.map((err) => { return err.message})\r\n         console.log(tabErrors)\r\n         throw new  Error(tabErrors);\r\n    }\r\n\r\n        const { data } = await resultat.json();\r\n    return dispatch({type: \"GET_EMPLOYE\"}, data.employes );\r\n}\r\n\r\n export  {\r\n    useEmployeContext,\r\n    useEmployeDispatchContext,\r\n    EmployeProvider,\r\n    getEmploye\r\n };"]},"metadata":{},"sourceType":"module"}