{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\src\\\\contexts\\\\divisionContext.js\";\nimport React from 'react';\nconst DivisionStateContext = React.createContext();\nconst DivisionDispatchContext = React.createContext(); //==================== LES FONCTIONS =====================//\n// ============= ADD DIVISION ==============================//\n\nconst addDivision = async (state, payload) => {\n  const RequestAddDivision = {\n    query: \"\\n            mutation{\\n                addDivision(input: { nom: \\\"\".concat(payload.nom, \"\\\"}){ id, nom }\\n            }\\n        \")\n  };\n  const result = await fetch('http://localhost:8000/graphql', {\n    method: \"post\",\n    body: JSON.stringify(RequestAddDivision),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n  const res = await result.json();\n  return console.log(res);\n}; // ============= GET DIVISION ==============================//\n\n\nconst getDivision = state => {\n  const RequestGetDivision = {\n    query: \"\\n            query{\\n                divisions{ id , nom }\\n            }\\n        \"\n  };\n  return fetch('http://localhost:8000/graphql', {\n    method: \"post\",\n    body: JSON.stringify(RequestGetDivision),\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }).then(res => {\n    if (res.status !== 200 && res.status !== 201) return res.json();\n  }).then(data => {});\n}; // =============================================//\n//                 REDUCER\n//==============================================//\n\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_DIVISION\":\n      return addDivision(state, action.payload);\n    // case \"DELETE_DIVISION\":\n    //    return deleteDivision();\n\n    case \"GET_DIVISIONS\":\n      return getDivision(state);\n    // case \"UPDATE_DIVISION\":\n    // return updateDivision();\n\n    default:\n      return state;\n  }\n}; // =============================================//\n//                 PROVIDER\n//==============================================//\n\n\nconst DivisionProvider = props => {\n  const _React$useReducer = React.useReducer(rootReducer, {\n    krato: {\n      odijie: \"r\"\n    }\n  }),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  return React.createElement(DivisionStateContext.Provider, {\n    value: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(DivisionDispatchContext.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, props.children));\n}; // =============================================//\n//                 le consummer du state\n//==============================================//\n\n\nconst useDivisionState = () => {\n  const context = React.useContext(DivisionStateContext);\n\n  if (context === undefined) {\n    throw new Error(\" le State doit s'uitliser dans le provider \");\n  }\n\n  return context;\n}; // =============================================//\n//                 le consummer du reducer\n//==============================================//\n\n\nconst useDispatchContext = () => {\n  const context = React.useContext(DivisionDispatchContext);\n\n  if (context === undefined) {\n    throw new Error(\" la fonction dispatch doit s'utiliser dans le provider \");\n  }\n\n  return context;\n};\n\nexport { useDivisionState, useDispatchContext, DivisionProvider };","map":{"version":3,"sources":["C:\\Users\\Kratos\\Desktop\\PROJET BTS\\kratos_react\\src\\contexts\\divisionContext.js"],"names":["React","DivisionStateContext","createContext","DivisionDispatchContext","addDivision","state","payload","RequestAddDivision","query","nom","result","fetch","method","body","JSON","stringify","headers","res","json","console","log","getDivision","RequestGetDivision","then","status","data","rootReducer","action","type","DivisionProvider","props","useReducer","krato","odijie","dispatch","children","useDivisionState","context","useContext","undefined","Error","useDispatchContext"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,oBAAoB,GAAGD,KAAK,CAACE,aAAN,EAA7B;AACA,MAAMC,uBAAuB,GAAGH,KAAK,CAACE,aAAN,EAAhC,C,CAIA;AAEA;;AACA,MAAME,WAAW,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC1C,QAAMC,kBAAkB,GAAG;AACvBC,IAAAA,KAAK,iFAEgCF,OAAO,CAACG,GAFxC;AADkB,GAA3B;AAQA,QAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAiC;AACvDC,IAAAA,MAAM,EAAE,MAD+C;AAEvDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,kBAAf,CAFiD;AAGvDS,IAAAA,OAAO,EAAE;AACL,sBAAiB;AADZ;AAH8C,GAAjC,CAA1B;AAQA,QAAMC,GAAG,GAAG,MAAMP,MAAM,CAACQ,IAAP,EAAlB;AACA,SAAOC,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAP;AACH,CAnBD,C,CAsBA;;;AACA,MAAMI,WAAW,GAAIhB,KAAD,IAAW;AAC3B,QAAMiB,kBAAkB,GAAG;AACvBd,IAAAA,KAAK;AADkB,GAA3B;AAQA,SAAOG,KAAK,CAAC,+BAAD,EAAiC;AACzCC,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeO,kBAAf,CAFmC;AAGzCN,IAAAA,OAAO,EAAE;AACL,sBAAiB;AADZ;AAHgC,GAAjC,CAAL,CAMJO,IANI,CAMEN,GAAG,IAAI;AACZ,QAAGA,GAAG,CAACO,MAAJ,KAAe,GAAf,IAAsBP,GAAG,CAACO,MAAJ,KAAe,GAAxC,EACA,OAAOP,GAAG,CAACC,IAAJ,EAAP;AACH,GATM,EASJK,IATI,CASCE,IAAI,IAAI,CAEf,CAXM,CAAP;AAaH,CAtBD,C,CAyBA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAG,CAACrB,KAAD,EAAQsB,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACG,aAAOxB,WAAW,CAACC,KAAD,EAAOsB,MAAM,CAACrB,OAAd,CAAlB;AACJ;AACC;;AACA,SAAK,eAAL;AACK,aAAOe,WAAW,CAAChB,KAAD,CAAlB;AACF;AACA;;AACH;AACI,aAAOA,KAAP;AAVR;AAYH,CAbD,C,CAeA;AACA;AACA;;;AACA,MAAMwB,gBAAgB,GAAIC,KAAD,IAAW;AAAA,4BAEJ9B,KAAK,CAAC+B,UAAN,CAAiBL,WAAjB,EAA6B;AAACM,IAAAA,KAAK,EAAC;AAAEC,MAAAA,MAAM,EAAC;AAAT;AAAP,GAA7B,CAFI;AAAA;AAAA,QAExB5B,KAFwB;AAAA,QAEjB6B,QAFiB;;AAIhC,SAAO,oBAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAG7B,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,uBAAD,CAAyB,QAAzB;AAAkC,IAAA,KAAK,EAAE6B,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMJ,KAAK,CAACK,QADZ,CADD,CAAP;AAKH,CATD,C,CAWA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,MAAM;AAC5B,QAAMC,OAAO,GAAGrC,KAAK,CAACsC,UAAN,CAAiBrC,oBAAjB,CAAhB;;AACA,MAAGoC,OAAO,KAAKE,SAAf,EACA;AACG,UAAM,IAAIC,KAAJ,CAAW,6CAAX,CAAN;AACF;;AACD,SAAOH,OAAP;AACF,CAPD,C,CASA;AACA;AACA;;;AACA,MAAMI,kBAAkB,GAAG,MAAM;AAC7B,QAAMJ,OAAO,GAAGrC,KAAK,CAACsC,UAAN,CAAiBnC,uBAAjB,CAAhB;;AACA,MAAGkC,OAAO,KAAKE,SAAf,EACA;AACQ,UAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACP;;AAED,SAAOH,OAAP;AACF,CARF;;AAWC,SACGD,gBADH,EAEGK,kBAFH,EAGGZ,gBAHH","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst DivisionStateContext = React.createContext();\r\nconst DivisionDispatchContext = React.createContext();\r\n\r\n\r\n\r\n//==================== LES FONCTIONS =====================//\r\n\r\n// ============= ADD DIVISION ==============================//\r\nconst addDivision = async (state, payload) => {\r\n    const RequestAddDivision = {\r\n        query: `\r\n            mutation{\r\n                addDivision(input: { nom: \"${payload.nom}\"}){ id, nom }\r\n            }\r\n        `\r\n    }\r\n\r\n    const result = await fetch('http://localhost:8000/graphql',{\r\n        method: \"post\",\r\n        body: JSON.stringify(RequestAddDivision),\r\n        headers: {\r\n            \"content-type\" : \"application/json\"\r\n        }\r\n    })\r\n\r\n    const res = await result.json();\r\n    return console.log(res);\r\n}\r\n\r\n\r\n// ============= GET DIVISION ==============================//\r\nconst getDivision = (state) => {\r\n    const RequestGetDivision = {\r\n        query: `\r\n            query{\r\n                divisions{ id , nom }\r\n            }\r\n        `\r\n    }\r\n\r\n    return fetch('http://localhost:8000/graphql',{\r\n        method: \"post\",\r\n        body: JSON.stringify(RequestGetDivision),\r\n        headers: {\r\n            \"Content-type\" : \"application/json\"\r\n        }\r\n    }).then( res => {\r\n        if(res.status !== 200 && res.status !== 201)\r\n        return res.json();\r\n    }).then(data => {\r\n\r\n    })\r\n\r\n}\r\n\r\n\r\n// =============================================//\r\n//                 REDUCER\r\n//==============================================//\r\nconst rootReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_DIVISION\":\r\n           return addDivision(state,action.payload);\r\n       // case \"DELETE_DIVISION\":\r\n        //    return deleteDivision();\r\n        case \"GET_DIVISIONS\":\r\n             return getDivision(state);\r\n           // case \"UPDATE_DIVISION\":\r\n           // return updateDivision();\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// =============================================//\r\n//                 PROVIDER\r\n//==============================================//\r\nconst DivisionProvider = (props) => {\r\n\r\n    const [ state, dispatch ] = React.useReducer(rootReducer,{krato:{ odijie:\"r\" }});\r\n\r\n    return <DivisionStateContext.Provider value={ state }>\r\n            <DivisionDispatchContext.Provider value={dispatch}>\r\n                { props.children }\r\n            </DivisionDispatchContext.Provider>\r\n    </DivisionStateContext.Provider>\r\n}\r\n\r\n// =============================================//\r\n//                 le consummer du state\r\n//==============================================//\r\nconst useDivisionState = () => {\r\n   const context = React.useContext(DivisionStateContext);\r\n   if(context === undefined)\r\n   {\r\n      throw new Error( \" le State doit s'uitliser dans le provider \")\r\n   }\r\n   return context;\r\n}\r\n\r\n// =============================================//\r\n//                 le consummer du reducer\r\n//==============================================//\r\nconst useDispatchContext = () => {\r\n    const context = React.useContext(DivisionDispatchContext);\r\n    if(context === undefined)\r\n    {\r\n            throw new Error(\" la fonction dispatch doit s'utiliser dans le provider \")\r\n    }\r\n \r\n    return context;\r\n }\r\n\r\n\r\n export  {\r\n    useDivisionState,\r\n    useDispatchContext,\r\n    DivisionProvider\r\n };"]},"metadata":{},"sourceType":"module"}