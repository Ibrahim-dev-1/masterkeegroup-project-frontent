{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\src\\\\contexts\\\\divisionContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nconst DivisionStateContext = React.createContext();\nconst DivisionDispatchContext = React.createContext(); //==================== LES FONCTIONS =====================//\n// =============================================//\n//                 REDUCER\n//==============================================//\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_DIVISION\":\n      return addDivision(state, action.payload);\n    // case \"DELETE_DIVISION\":\n    //    return deleteDivision();\n\n    case \"GET_DIVISIONS\":\n      return _objectSpread({}, state, {\n        divisions: action.payload\n      });\n    // case \"UPDATE_DIVISION\":\n    // return updateDivision();\n\n    default:\n      return state;\n  }\n}; // =============================================//\n//                 PROVIDER\n//==============================================//\n\n\nconst DivisionProvider = props => {\n  const _React$useReducer = React.useReducer(rootReducer, {\n    divisions: []\n  }),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  return React.createElement(DivisionStateContext.Provider, {\n    value: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(DivisionDispatchContext.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, props.children));\n}; // =============================================//\n//                 le consummer du state\n//==============================================//\n\n\nconst useDivisionState = () => {\n  const context = React.useContext(DivisionStateContext);\n\n  if (context === undefined) {\n    throw new Error(\" le State doit s'uitliser dans le provider \");\n  }\n\n  return context;\n}; // =============================================//\n//                 le consummer du reducer\n//==============================================//\n\n\nconst useDispatchContext = () => {\n  const context = React.useContext(DivisionDispatchContext);\n\n  if (context === undefined) {\n    throw new Error(\" la fonction dispatch doit s'utiliser dans le provider \");\n  }\n\n  return context;\n};\n\nconst getDivision = async (dispatch, token) => {\n  const requestBody = {\n    query: \"\\n            query {\\n                divisions{\\n                    id \\n                    nom\\n                }\\n            }\\n        \"\n  };\n  const result = await fetch('http://localhost:8000/graphql', {\n    method: \"POST\",\n    body: JSON.stringify(requestBody),\n    headers: {\n      \"content-type\": \"application/json\",\n      Authorization: 'Kratos ' + token\n    }\n  });\n\n  if (result.status !== 200 && result.status !== 201) {\n    console.log((await result.json()));\n    throw new Error(\"Error :  impossible de fetch les donnÃ©s depuis l'api backend de notre application \" + result);\n  }\n\n  const _ref = await result.json(),\n        data = _ref.data;\n\n  console.log(\" les data: \" + data);\n  dispatch({\n    type: \"GET_DIVISIONS\",\n    payload: data.divisions\n  });\n};\n\nconst addDivision = (dispatch, token) => {};\n\nexport { useDivisionState, useDispatchContext, DivisionProvider, getDivision, addDivision };","map":{"version":3,"sources":["C:\\Users\\Kratos\\Desktop\\PROJET BTS\\kratos_react\\src\\contexts\\divisionContext.js"],"names":["React","DivisionStateContext","createContext","DivisionDispatchContext","rootReducer","state","action","type","addDivision","payload","divisions","DivisionProvider","props","useReducer","dispatch","children","useDivisionState","context","useContext","undefined","Error","useDispatchContext","getDivision","token","requestBody","query","result","fetch","method","body","JSON","stringify","headers","Authorization","status","console","log","json","data"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst DivisionStateContext = React.createContext();\r\nconst DivisionDispatchContext = React.createContext();\r\n\r\n\r\n\r\n//==================== LES FONCTIONS =====================//\r\n\r\n\r\n// =============================================//\r\n//                 REDUCER\r\n//==============================================//\r\nconst rootReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_DIVISION\":\r\n           return addDivision(state,action.payload);\r\n       // case \"DELETE_DIVISION\":\r\n        //    return deleteDivision();\r\n        case \"GET_DIVISIONS\":\r\n            return {...state, divisions: action.payload}\r\n        \r\n           // case \"UPDATE_DIVISION\":\r\n           // return updateDivision();\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// =============================================//\r\n//                 PROVIDER\r\n//==============================================//\r\nconst DivisionProvider = (props) => {\r\n\r\n    const [ state, dispatch ] = React.useReducer(rootReducer, {divisions:[]});\r\n    return <DivisionStateContext.Provider value={ state } >\r\n            <DivisionDispatchContext.Provider value={dispatch}>\r\n                { props.children }\r\n            </DivisionDispatchContext.Provider>\r\n    </DivisionStateContext.Provider>\r\n}\r\n\r\n// =============================================//\r\n//                 le consummer du state\r\n//==============================================//\r\nconst useDivisionState = () => {\r\n   const context = React.useContext(DivisionStateContext);\r\n   if(context === undefined)\r\n   {\r\n      throw new Error( \" le State doit s'uitliser dans le provider \")\r\n   }\r\n   return  context;\r\n}\r\n\r\n// =============================================//\r\n//                 le consummer du reducer\r\n//==============================================//\r\nconst useDispatchContext = () => {\r\n    const context = React.useContext(DivisionDispatchContext);\r\n    if(context === undefined)\r\n    {\r\n        throw new Error(\" la fonction dispatch doit s'utiliser dans le provider \")\r\n    }\r\n \r\n    return context;\r\n }\r\n\r\n const getDivision = async (dispatch, token ) => {\r\n    const requestBody = {\r\n        query: `\r\n            query {\r\n                divisions{\r\n                    id \r\n                    nom\r\n                }\r\n            }\r\n        `\r\n    }\r\n\r\n    const result = await fetch('http://localhost:8000/graphql', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n            \"content-type\": \"application/json\",\r\n            Authorization: 'Kratos ' + token\r\n        }\r\n    })\r\n\r\n    if(result.status !== 200 && result.status !== 201){\r\n        console.log(await result.json())\r\n        throw new Error(\"Error :  impossible de fetch les donnÃ©s depuis l'api backend de notre application \" + result )\r\n    }\r\n\r\n    const { data } = await result.json();\r\n    console.log(\" les data: \" + data )\r\n    dispatch({type: \"GET_DIVISIONS\" , payload: data.divisions })\r\n }\r\n\r\n\r\n const addDivision = (dispatch , token ) => {\r\n    \r\n }\r\n\r\n export  {\r\n    useDivisionState,\r\n    useDispatchContext,\r\n    DivisionProvider,\r\n    getDivision,\r\n    addDivision\r\n };"]},"metadata":{},"sourceType":"module"}