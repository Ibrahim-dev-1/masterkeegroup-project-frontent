{"ast":null,"code":"import _slicedToArray from \"D:\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"D:\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\PROJET BTS\\\\kratos_react\\\\src\\\\contexts\\\\loginContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nconst loginStateContext = React.createContext();\nconst loginDispatchContext = React.createContext(); // =============================================//\n//                 Root Reducer\n//==============================================//\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return _objectSpread({}, state, {\n        login: action.payload\n      });\n\n    case \"LOGOUT\":\n      return _objectSpread({}, state, {\n        login: action.payload\n      });\n\n    default:\n      console.log(\"ce type d'action n'est pas reconnu . veuillez entrez une action correcte : ACTION ERROR: \" + action.type);\n      return state;\n  }\n}; // =============================================//\n//                 PROVIDER\n//==============================================//\n\n\nconst LoginProvider = ({\n  children\n}) => {\n  const _React$useReducer = React.useReducer(rootReducer, {\n    login: {\n      token: ''\n    }\n  }),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  return React.createElement(loginStateContext.Provider, {\n    value: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(loginDispatchContext.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, children));\n}; // =============================================//\n//                 useLoginState\n//==============================================//\n\n\nconst useLoginState = () => {\n  // recuperation de notre state grace au consumer\n  const context = React.useContext(loginStateContext);\n  if (context === undefined) throw new Error(\"le State doit s'utiliser dans un provider\");\n  return context;\n}; // =============================================//\n//                 useLoginDispatchState\n//==============================================//\n\n\nconst useLoginDispatchState = () => {\n  // recuperation de notre fonction dispatch grace au consumer\n  const context = React.useContext(loginDispatchContext);\n  if (context === undefined) throw new Error(\" la fonction dispatch doit s'utilsier dans le provider\");\n  return context;\n}; // =============================================//\n//                 Order fonctions\n//==============================================//\n// LOGIN FONCTION IMPLEMENTATION\n\n\nconst login = async (dispatch, myLoginState) => {\n  const requestBody = {\n    query: \"\\n            query{\\n                login(email: \\\"\".concat(myLoginState.email, \"\\\", password: \\\"\").concat(myLoginState.password, \"\\\"){\\n                     userId \\n                     userEmail \\n                     admin \\n                     token \\n                     tokenExpiration\\n                 }\\n            }\\n        \")\n  };\n  const results = await fetch('http://localhost:8000/graphql', {\n    method: \"POST\",\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-type': 'application/json'\n    }\n  });\n\n  if (results.status !== 201 && results.status !== 200) {\n    console.log(results.json());\n    throw new Error(\"erreur de Login ...\" + results.statusText);\n  }\n\n  const _ref = await results.json(),\n        data = _ref.data;\n\n  dispatch({\n    type: \"LOGIN\",\n    payload: data.login\n  });\n};\n\nconst logout = dispatch => {\n  dispatch({\n    type: \"LOGOUT \",\n    payload: {\n      token: '',\n      userId: '',\n      userEmail: '',\n      tokenExpiration: ''\n    }\n  });\n}; // =============================================//\n//                MODULES iMPORTS               //\n\n\nexport { useLoginDispatchState, useLoginState, LoginProvider, login, logout };","map":{"version":3,"sources":["D:\\PROJET BTS\\kratos_react\\src\\contexts\\loginContext.js"],"names":["React","loginStateContext","createContext","loginDispatchContext","rootReducer","state","action","type","login","payload","console","log","LoginProvider","children","useReducer","token","dispatch","useLoginState","context","useContext","undefined","Error","useLoginDispatchState","myLoginState","requestBody","query","email","password","results","fetch","method","body","JSON","stringify","headers","status","json","statusText","data","logout","userId","userEmail","tokenExpiration"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst loginStateContext = React.createContext();\r\nconst loginDispatchContext = React.createContext();\r\n\r\n\r\n\r\n// =============================================//\r\n//                 Root Reducer\r\n//==============================================//\r\nconst rootReducer = (state, action) => {\r\n    switch(action.type){\r\n        case \"LOGIN\":\r\n            return {...state , login: action.payload}\r\n        case \"LOGOUT\":\r\n            return {...state , login: action.payload}\r\n        default:\r\n            console.log(\"ce type d'action n'est pas reconnu . veuillez entrez une action correcte : ACTION ERROR: \" + action.type );\r\n            return state;\r\n    }\r\n}\r\n\r\n// =============================================//\r\n//                 PROVIDER\r\n//==============================================//\r\nconst LoginProvider = ({children}) => {\r\n    const [state, dispatch] = React.useReducer(rootReducer, {\r\n        login:{token: ''}\r\n    })\r\n\r\n    return <loginStateContext.Provider value={state}>\r\n            <loginDispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </loginDispatchContext.Provider>\r\n    </loginStateContext.Provider>\r\n}\r\n// =============================================//\r\n//                 useLoginState\r\n//==============================================//\r\nconst useLoginState = () => {\r\n    // recuperation de notre state grace au consumer\r\n    const context = React.useContext(loginStateContext);\r\n    if(context === undefined)\r\n        throw new Error(\"le State doit s'utiliser dans un provider\")\r\n\r\n    return context;\r\n}\r\n\r\n// =============================================//\r\n//                 useLoginDispatchState\r\n//==============================================//\r\nconst useLoginDispatchState = () => {\r\n    // recuperation de notre fonction dispatch grace au consumer\r\n    const context = React.useContext(loginDispatchContext);\r\n    if(context === undefined)\r\n        throw new Error(\" la fonction dispatch doit s'utilsier dans le provider\")\r\n    return context;\r\n}\r\n\r\n// =============================================//\r\n//                 Order fonctions\r\n//==============================================//\r\n// LOGIN FONCTION IMPLEMENTATION\r\nconst login = async (dispatch, myLoginState) => {\r\n    const requestBody = {\r\n        query: `\r\n            query{\r\n                login(email: \"${myLoginState.email }\", password: \"${myLoginState.password}\"){\r\n                     userId \r\n                     userEmail \r\n                     admin \r\n                     token \r\n                     tokenExpiration\r\n                 }\r\n            }\r\n        `\r\n    }\r\n\r\n    const results = await fetch('http://localhost:8000/graphql', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(requestBody),\r\n        headers:{\r\n            'Content-type': 'application/json'\r\n        }\r\n    })\r\n    if(results.status !==  201 && results.status !== 200){\r\n        console.log(results.json())\r\n        throw new Error(\"erreur de Login ...\" + results.statusText);\r\n    }\r\n    const {data} =  await results.json();\r\n\r\n    dispatch({type: \"LOGIN\" , payload: data.login })\r\n}\r\n\r\nconst logout = (dispatch) => {\r\n    dispatch({type: \"LOGOUT \" , payload: { token: '', userId: '', userEmail: '', tokenExpiration: ''}});\r\n}\r\n// =============================================//\r\n//                MODULES iMPORTS               //\r\n\r\nexport {\r\n    useLoginDispatchState,\r\n    useLoginState,\r\n    LoginProvider,\r\n    login,\r\n    logout\r\n}"]},"metadata":{},"sourceType":"module"}