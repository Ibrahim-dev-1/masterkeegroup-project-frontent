{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Kratos\\\\Desktop\\\\PROJET BTS\\\\kratos_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LOGIN } from '../types/types'; // les fonctions \n\nconst login = async (state, payload) => {\n  const queryBody = {\n    query: \"\\n                query{\\n                    login(email: \\\"\".concat(payload.email, \"\\\" , password: \\\"\").concat(payload.password, \"\\\") { userId , token , tokenExpiration }\\n                }\\n            \")\n  };\n  const res = await fetch('http://localhost:8000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(queryBody),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (res.status !== 200 && res.status !== 201) return console.log(\"Erreur de recupération des informations de la base de donné\");\n\n  const _ref = await res.json(),\n        data = _ref.data;\n\n  return _objectSpread({}, state, {\n    login: data.login\n  });\n}; // le reducer\n\n\nconst reducers = (state, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return login(state, action.auth);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["C:\\Users\\Kratos\\Desktop\\PROJET BTS\\kratos_react\\src\\reducers\\authReducer.js"],"names":["LOGIN","login","state","payload","queryBody","query","email","password","res","fetch","method","body","JSON","stringify","headers","status","console","log","json","data","reducers","action","type","auth"],"mappings":";;;;;;AAAA,SAAQA,KAAR,QAAoB,gBAApB,C,CAEA;;AAEA,MAAMC,KAAK,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAGhC,QAAMC,SAAS,GAAG;AACdC,IAAAA,KAAK,yEAEmBF,OAAO,CAACG,KAF3B,8BAEkDH,OAAO,CAACI,QAF1D;AADS,GAAlB;AAQA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAAD,EACvB;AACIC,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAFV;AAGIU,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHb,GADuB,CAAvB;AASA,MAAGN,GAAG,CAACO,MAAJ,KAAe,GAAf,IAAsBP,GAAG,CAACO,MAAJ,KAAe,GAAxC,EACG,OAAOC,OAAO,CAACC,GAAR,CAAY,6DAAZ,CAAP;;AArB6B,eAuBjB,MAAMT,GAAG,CAACU,IAAJ,EAvBW;AAAA,QAuBzBC,IAvByB,QAuBzBA,IAvByB;;AAyBjC,2BAAWjB,KAAX;AAAkBD,IAAAA,KAAK,EAAEkB,IAAI,CAAClB;AAA9B;AAEN,CA3BD,C,CA8BA;;;AACA,MAAMmB,QAAQ,GAAG,CAAClB,KAAD,EAAQmB,MAAR,KAAmB;AAChC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKtB,KAAL;AACI,aAAOC,KAAK,CAACC,KAAD,EAAQmB,MAAM,CAACE,IAAf,CAAZ;;AACJ;AACI,aAAOrB,KAAP;AAJR;AAOH,CARD;;AASA,eAAekB,QAAf","sourcesContent":["import {LOGIN} from '../types/types';\r\n\r\n// les fonctions \r\n\r\nconst login = async (state, payload) => {\r\n\r\n\r\n        const queryBody = {\r\n            query: `\r\n                query{\r\n                    login(email: \"${payload.email}\" , password: \"${payload.password}\") { userId , token , tokenExpiration }\r\n                }\r\n            `\r\n        }\r\n    \r\n        const res = await fetch('http://localhost:8000/graphql',\r\n        {\r\n            method: 'POST',\r\n            body: JSON.stringify(queryBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        if(res.status !== 200 && res.status !== 201)\r\n           return console.log(\"Erreur de recupération des informations de la base de donné\");\r\n        \r\n        const {data} = await res.json();\r\n       \r\n       return {...state, login: data.login};\r\n  \r\n}\r\n\r\n\r\n// le reducer\r\nconst reducers = (state, action) => {\r\n    switch(action.type ){\r\n        case LOGIN:\r\n            return login(state, action.auth);\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport default reducers;"]},"metadata":{},"sourceType":"module"}