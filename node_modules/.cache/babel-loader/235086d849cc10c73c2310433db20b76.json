{"ast":null,"code":"import { LOGIN } from '../types/types'; // les fonctions \n\nconst login = async (state, payload) => {\n  try {\n    const queryBody = {\n      query: \"\\n                query{\\n                    login(email: \\\"\".concat(payload.email, \"\\\" , password: \\\"\").concat(payload.password, \"\\\") { userId , token , tokenExpiration }\\n                }\\n            \")\n    };\n    const res = await fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(queryBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (res.status !== 200 && res.status !== 201) throw new Error(\"Erreur de recupération des informations de la base de donné\");\n    const data = res.json();\n    console.log(data.login);\n    if (data.data.login.token === '') throw new Error('le token est null');\n    return [...state, {\n      login: data.login\n    }];\n  } catch (err) {\n    console.log(err);\n  }\n}; // le reducer\n\n\nconst reducers = (state, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return login(state, action.auth);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["C:\\Users\\Kratos\\Desktop\\PROJET BTS\\kratos_react\\src\\reducers\\authReducer.js"],"names":["LOGIN","login","state","payload","queryBody","query","email","password","res","fetch","method","body","JSON","stringify","headers","status","Error","data","json","console","log","token","err","reducers","action","type","auth"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,gBAApB,C,CAEA;;AAEA,MAAMC,KAAK,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAEpC,MAAG;AACC,UAAMC,SAAS,GAAG;AACdC,MAAAA,KAAK,yEAEmBF,OAAO,CAACG,KAF3B,8BAEkDH,OAAO,CAACI,QAF1D;AADS,KAAlB;AAQA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAAD,EACvB;AACIC,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAFV;AAGIU,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHb,KADuB,CAAvB;AASA,QAAGN,GAAG,CAACO,MAAJ,KAAe,GAAf,IAAsBP,GAAG,CAACO,MAAJ,KAAe,GAAxC,EACG,MAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AAEH,UAAMC,IAAI,GAAGT,GAAG,CAACU,IAAJ,EAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAAChB,KAAjB;AACA,QAAGgB,IAAI,CAACA,IAAL,CAAUhB,KAAV,CAAgBoB,KAAhB,KAA0B,EAA7B,EACI,MAAM,IAAIL,KAAJ,CAAU,mBAAV,CAAN;AAGJ,WAAO,CAAC,GAAGd,KAAJ,EAAW;AAACD,MAAAA,KAAK,EAAEgB,IAAI,CAAChB;AAAb,KAAX,CAAP;AAEH,GA7BD,CA6BC,OAAMqB,GAAN,EAAU;AACPH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH;AACJ,CAlCD,C,CAqCA;;;AACA,MAAMC,QAAQ,GAAG,CAACrB,KAAD,EAAQsB,MAAR,KAAmB;AAChC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKzB,KAAL;AACI,aAAOC,KAAK,CAACC,KAAD,EAAQsB,MAAM,CAACE,IAAf,CAAZ;;AACJ;AACI,aAAOxB,KAAP;AAJR;AAOH,CARD;;AASA,eAAeqB,QAAf","sourcesContent":["import {LOGIN} from '../types/types';\r\n\r\n// les fonctions \r\n\r\nconst login = async (state, payload) => {\r\n\r\n    try{\r\n        const queryBody = {\r\n            query: `\r\n                query{\r\n                    login(email: \"${payload.email}\" , password: \"${payload.password}\") { userId , token , tokenExpiration }\r\n                }\r\n            `\r\n        }\r\n    \r\n        const res = await fetch('http://localhost:8000/graphql',\r\n        {\r\n            method: 'POST',\r\n            body: JSON.stringify(queryBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        if(res.status !== 200 && res.status !== 201)\r\n           throw new Error(\"Erreur de recupération des informations de la base de donné\");\r\n        \r\n        const data = res.json();\r\n        console.log(data.login );\r\n        if(data.data.login.token === '')\r\n            throw new Error('le token est null');\r\n        \r\n           \r\n        return [...state, {login: data.login }];\r\n       \r\n    }catch(err){\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n\r\n// le reducer\r\nconst reducers = (state, action) => {\r\n    switch(action.type ){\r\n        case LOGIN:\r\n            return login(state, action.auth);\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport default reducers;"]},"metadata":{},"sourceType":"module"}